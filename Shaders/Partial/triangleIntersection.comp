bool triangleIntersection(vec3 rayOrigin, vec3 rayDirection, Vertex vertices[3]) {
  //ray origin
  vec3 orig = rayOrigin;
  
  //ray direction
  vec3 dir = rayDirection;

  //triangle points
  vec3 v0 = vertices[0].Position.xyz;
  vec3 v1 = vertices[1].Position.xyz;
  vec3 v2 = vertices[2].Position.xyz;
  
  //triangle normal
  vec3 N = -((vertices[0].Normal + vertices[1].Normal + vertices[2].Normal) / 3).xyz;
  
  //Get ray triangle point
  float D = dot(N, v0);
  float t = -(dot(N, orig) + D) / dot(N, dir);

  //ray is beind the triangle so return false
  if (t >= 0)
    return false;

  vec3 P = orig + t * dir;

  //Is point inside triangle?
  vec3 edge0 = v1 - v0;
  vec3 edge1 = v2 - v1;
  vec3 edge2 = v0 - v2;
  vec3 C0 = P - v0;
  vec3 C1 = P - v1;
  vec3 C2 = P - v2;
  
  if (dot(N, cross(edge0, C0)) <= 0)
    return false;

  if (dot(N, cross(edge1, C1)) <= 0)
    return false;

  if (dot(N, cross(edge2, C2)) <= 0)
    return false;

  return true;
}